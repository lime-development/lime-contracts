name: Update Docs

permissions:
  contents: write
  pull-requests: write
  actions: write

on:
  push:
    branches:
      - main
    paths:
      - '**/*.sol'
      - '**/*.js'
  workflow_dispatch:

jobs:
  update-and-pull-request:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Compile contracts
        run: npx hardhat compile
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

      - name: Update docs
        run: npx hardhat docgen
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

      - name: Run tokenomics scripts
        run: |
          for NETWORK in haqq ethereum sepolia bnb base boba; do
            NETWORK=$NETWORK npx hardhat run scripts/tokenomics.js
          done
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ALCHEMY_KEY: ${{ secrets.ALCHEMY_KEY }}

      - name: Generate index.md
        run: |
          rm -r ./docs/contracts/test || true
          echo "# Lime Documentation Index" > ./docs/index.md
          echo "" >> ./docs/index.md
          for dir in $(find ./docs -type d ! -path './docs'); do
            echo "## $(basename "$dir")" >> ./docs/index.md
            for file in $(find "$dir" -maxdepth 1 -name '*.md'); do
              filename=$(basename "$file")
              name="${filename%.md}"
              relative_path="${file#./docs/}"
              relative_path="${relative_path%.md}"
              link_path="${relative_path}"
              echo "- [${name}](${link_path})" >> ./docs/index.md
            done
            echo "" >> ./docs/index.md
          done
          echo "_Updated at $(date '+%Y-%m-%d %H:%M:%S')_" >> ./docs/index.md

      - name: Add Front Matter to Markdown files
        run: |
          # Add front matter to all Markdown files that don't have it
          find ./docs -name "*.md" | while read file; do
            filename=$(basename "$file")
            echo "Processing: $file"
        
            # Skip index.md
            if [[ "$filename" == "index.md" ]]; then
              echo "  Skipped: index.md (explicit exclusion)"
              continue
            fi
        
            # Check if front matter already exists (looking for '---' at beginning of file)
            if head -n 1 "$file" | grep -q "^---"; then
              echo "  Skipped: front matter already exists"
              continue
            fi
        
            # Generate title from filename
            name_without_ext="${filename%.md}"
            title=$(echo "$name_without_ext" | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g')
        
            # Use a unique temp file
            temp_file=$(mktemp)
        
            # Write front matter
            {
              echo "---"
              echo "layout: default"
              echo "title: $title"
              echo "---"
              cat "$file"
            } > "$temp_file"
        
            # Replace original file
            mv "$temp_file" "$file"
            echo "  Updated: front matter added"
          done

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ""

      - name: Delete update/docs-auto branch
        run: |
          git fetch origin
          if git ls-remote --exit-code --heads origin update/docs-auto; then
            git push origin --delete update/docs-auto
          fi

      - name: Create update/docs-auto branch
        run: |
          git checkout -B update/docs-auto origin/main

      - name: Commit and push docs changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global commit.gpgsign true
          git config --global user.signingkey $(gpg --list-secret-keys --with-colons | grep '^sec' | cut -d':' -f5)

          git add -A docs/
          git diff --cached --quiet || (git commit -S -m "Update docs [auto]" && git push origin update/docs-auto)
          
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --base main \
            --head update/docs-auto \
            --title "Update docs [auto]" \
            --body "This PR updates the autogenerated docs.

            - Regenerates contract documentation
            - Updates tokenomics data
            - Rebuilds index.md" \
            --label "documentation" 
